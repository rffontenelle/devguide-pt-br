# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2022, Python Software Foundation
# This file is distributed under the same license as the Python Developer's
# Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Developer's Guide\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-08 22:51-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../core-developers/committing.rst:4
msgid "Accepting Pull Requests"
msgstr ""

#: ../../core-developers/committing.rst:8
msgid ""
"This page is a step-by-step guide for core developers who need to assess, "
"merge, and possibly backport a pull request on the main repository."
msgstr ""

#: ../../core-developers/committing.rst:12
msgid "Assessing a pull request"
msgstr ""

#: ../../core-developers/committing.rst:14
msgid ""
"Before you can accept a pull request, you need to make sure that it is ready "
"to enter the public source tree. Ask yourself the following questions:"
msgstr ""

#: ../../core-developers/committing.rst:19
msgid "**Are there ongoing discussions at the issue tracker?**"
msgstr ""

#: ../../core-developers/committing.rst:18
msgid ""
"Read the linked issue. If there are ongoing discussions, then we need to "
"have a resolution there before we can merge the pull request."
msgstr ""

#: ../../core-developers/committing.rst:24
msgid "**Was the pull request first made against the appropriate branch?**"
msgstr ""

#: ../../core-developers/committing.rst:22
msgid ""
"The only branch that receives new features is ``main``, the in-development "
"branch. Pull requests should only target bug-fix branches if an issue "
"appears in only that version and possibly older versions."
msgstr ""

#: ../../core-developers/committing.rst:29
msgid "**Are the changes acceptable?**"
msgstr ""

#: ../../core-developers/committing.rst:27
msgid ""
"If you want to share your work-in-progress code on a feature or bugfix, then "
"you can open a ``WIP``-prefixed pull request, publish patches on the `issue "
"tracker`_, or create a public fork of the repository."
msgstr ""

#: ../../core-developers/committing.rst:32
msgid "**Do the checks on the pull request show that the test suite passes?**"
msgstr ""

#: ../../core-developers/committing.rst:32
msgid "Make sure that all of the status checks are passing."
msgstr ""

#: ../../core-developers/committing.rst:36
msgid "**Is the patch in a good state?**"
msgstr ""

#: ../../core-developers/committing.rst:35
msgid ""
"Check :ref:`patch` and :ref:`helptriage` to review what is expected of a "
"patch."
msgstr ""

#: ../../core-developers/committing.rst:44
msgid ""
"**Does the patch break backwards-compatibility without a strong reason?**"
msgstr ""

#: ../../core-developers/committing.rst:39
msgid ""
":ref:`Run the entire test suite <runtests>` to make sure that everything "
"still passes. If there is a change to the semantics, then there needs to be "
"a strong reason, because it will cause some peoples' code to break. If you "
"are unsure if the breakage is worth it, then ask on the `Core Development "
"Discourse category <https://discuss.python.org/c/core-dev/23>`__."
msgstr ""

#: ../../core-developers/committing.rst:49
msgid "**Does documentation need to be updated?**"
msgstr ""

#: ../../core-developers/committing.rst:47
msgid ""
"If the pull request introduces backwards-incompatible changes (e.g. "
"deprecating or removing a feature), then make sure that those changes are "
"reflected in the documentation before you merge the pull request."
msgstr ""

#: ../../core-developers/committing.rst:58
msgid ""
"**Were appropriate labels added to signify necessary backporting of the pull "
"request?**"
msgstr ""

#: ../../core-developers/committing.rst:52
msgid ""
"If it is determined that a pull request needs to be backported into one or "
"more of the maintenance branches, then a core developer can apply the label "
"``needs backport to X.Y`` to the pull request. Once the backport pull "
"request has been created, remove the ``needs backport to X.Y`` label from "
"the original pull request. (Only core developers and members of the :ref:"
"`Python Triage Team <triage-team>` can apply labels to GitHub pull requests)."
msgstr ""

#: ../../core-developers/committing.rst:68
msgid ""
"**Does the pull request pass a check indicating that the submitter has "
"signed the CLA?**"
msgstr ""

#: ../../core-developers/committing.rst:61
msgid ""
"Make sure that the contributor has signed a `Contributor Licensing Agreement "
"<https://www.python.org/psf/contrib/contrib-form/>`_ (CLA), unless their "
"change has no possible intellectual property associated with it (e.g. fixing "
"a spelling mistake in documentation). The `CPython CLA Bot <https://github."
"com/apps/cpython-cla-bot/>`_ checks whether the author has signed the CLA, "
"and replies in the PR if they haven't. For further questions about the CLA "
"process, write to contributors@python.org."
msgstr ""

#: ../../core-developers/committing.rst:76
msgid ""
"**Were** ``What's New in Python`` **and** ``Misc/NEWS.d/next`` **updated?**"
msgstr ""

#: ../../core-developers/committing.rst:71
msgid ""
"If the change is particularly interesting for end users (e.g. new features, "
"significant improvements, or backwards-incompatible changes), then an entry "
"in the ``What's New in Python`` document (in ``Doc/whatsnew/``) should be "
"added as well. Changes that affect only documentation generally do not "
"require a ``NEWS`` entry. (See the following section for more information.)"
msgstr ""

#: ../../core-developers/committing.rst:81
msgid "Updating NEWS and What's New in Python"
msgstr ""

#: ../../core-developers/committing.rst:83
msgid ""
"Almost all changes made to the code base deserve an entry in ``Misc/NEWS."
"d``. If the change is particularly interesting for end users (e.g. new "
"features, significant improvements, or backwards-incompatible changes), then "
"an entry in the ``What's New in Python`` document (in ``Doc/whatsnew/``) "
"should be added as well. Changes that affect documentation only generally do "
"not require a ``NEWS`` entry."
msgstr ""

#: ../../core-developers/committing.rst:90
msgid ""
"There are two notable exceptions to this general principle, and they both "
"relate to changes that:"
msgstr ""

#: ../../core-developers/committing.rst:93
msgid "Already have a ``NEWS`` entry"
msgstr ""

#: ../../core-developers/committing.rst:94
msgid ""
"Have not yet been included in any formal release (including alpha and beta "
"releases)"
msgstr ""

#: ../../core-developers/committing.rst:97
msgid "These are the two exceptions:"
msgstr ""

#: ../../core-developers/committing.rst:99
msgid ""
"**If a change is reverted prior to release**, then the corresponding entry "
"is simply removed. Otherwise, a new entry must be added noting that the "
"change has been reverted (e.g. when a feature is released in an alpha and "
"then cut prior to the first beta)."
msgstr ""

#: ../../core-developers/committing.rst:104
msgid ""
"**If a change is a fix (or other adjustment) to an earlier unreleased change "
"and the original** ``NEWS`` **entry remains valid**, then no additional "
"entry is needed."
msgstr ""

#: ../../core-developers/committing.rst:108
msgid ""
"If a change needs an entry in ``What's New in Python``, then it is very "
"likely not suitable for including in a maintenance release."
msgstr ""

#: ../../core-developers/committing.rst:111
msgid ""
"``NEWS`` entries go into the ``Misc/NEWS.d`` directory as individual files. "
"The ``NEWS`` entry can be created by using `blurb-it <https://blurb-it."
"herokuapp.com/>`_, or the `blurb <https://pypi.org/project/blurb/>`_ tool "
"and its ``blurb add`` command."
msgstr ""

#: ../../core-developers/committing.rst:116
msgid ""
"If you are unable to use the tool, then you can create the ``NEWS`` entry "
"file manually. The ``Misc/NEWS.d`` directory contains a sub-directory named "
"``next``, which contains various sub-directories representing "
"classifications for what was affected (e.g. ``Misc/NEWS.d/next/Library`` for "
"changes relating to the standard library). The file name itself should be in "
"the format ``<datetime>.gh-issue-<issue-number>.<nonce>.rst``:"
msgstr ""

#: ../../core-developers/committing.rst:123
msgid ""
"``<datetime>`` is today's date joined with a hyphen (``-``) to the current "
"time, in the ``YYYY-MM-DD-hh-mm-ss`` format (e.g. ``2017-05-27-16-46-23``)."
msgstr ""

#: ../../core-developers/committing.rst:125
msgid ""
"``<issue-number>`` is the issue number the change is for (e.g. ``12345`` for "
"``gh-issue-12345``)."
msgstr ""

#: ../../core-developers/committing.rst:127
msgid ""
"``<nonce>`` is a unique string to guarantee that the file name is unique "
"across branches (e.g. ``Yl4gI2``). It is typically six characters long, but "
"it can be any length of letters and numbers. Its uniqueness can be satisfied "
"by typing random characters on your keyboard."
msgstr ""

#: ../../core-developers/committing.rst:132
msgid ""
"As a result, a file name can look something like ``Misc/NEWS.d/next/"
"Library/2017-05-27-16-46-23.gh-issue-12345.Yl4gI2.rst``."
msgstr ""

#: ../../core-developers/committing.rst:135
msgid ""
"The contents of a ``NEWS`` file should be valid reStructuredText. An 80 "
"character column width should be used. There is no indentation or leading "
"marker in the file (e.g. ``-``). There is also no need to start the entry "
"with the issue number since it is part of the file name. You can use :ref:"
"`inline markups <rest-inline-markup>` too. Here is an example of a ``NEWS`` "
"entry::"
msgstr ""

#: ../../core-developers/committing.rst:145
msgid ""
"The inline Sphinx roles like ``:func:`` can be used help readers find more "
"information. You can build HTML and verify that the link target is "
"appropriate by using :ref:`make html <building-using-make>`."
msgstr ""

#: ../../core-developers/committing.rst:149
msgid ""
"While Sphinx roles can be beneficial to readers, they are not required. "
"Inline ````code blocks```` can be used instead."
msgstr ""

#: ../../core-developers/committing.rst:154
msgid "Working with Git_"
msgstr ""

#: ../../core-developers/committing.rst:157
msgid ":ref:`gitbootcamp`"
msgstr ""

#: ../../core-developers/committing.rst:159
msgid ""
"As a core developer, you have the ability to push changes to the official "
"Python repositories, so you need to be careful with your workflow:"
msgstr ""

#: ../../core-developers/committing.rst:162
msgid ""
"**You should not push new branches to the main repository.**  You can still "
"use them in the fork that you use for the development of patches. You can "
"also push these branches to a separate public repository for maintenance "
"work before it is integrated into the main repository."
msgstr ""

#: ../../core-developers/committing.rst:167
msgid ""
"**You should not commit directly into the** ``main`` **branch, or any of the "
"maintenance branches.** You should commit against your own feature branch, "
"and then create a pull request."
msgstr ""

#: ../../core-developers/committing.rst:171
msgid ""
"**For a small change, you can make a quick edit through the GitHub web UI.** "
"If you choose to use the web UI, be aware that GitHub will create a new "
"branch in the main CPython repository rather than in your fork. Delete this "
"newly created branch after it has been merged into the ``main`` branch or "
"any of the maintenance branches. To keep the CPython repository tidy, remove "
"the new branch within a few days."
msgstr ""

#: ../../core-developers/committing.rst:178
msgid ""
"Keep a fork of the main repository, since it will allow you to revert all "
"local changes (even committed ones) if you're not happy with your local "
"clone."
msgstr ""

#: ../../core-developers/committing.rst:189
msgid "Seeing active branches"
msgstr ""

#: ../../core-developers/committing.rst:191
msgid ""
"If you use ``git branch``, then you will see a :ref:`list of branches "
"<branchstatus>`. The only branch that receives new features is ``main``, the "
"in-development branch. The other branches receive only bug fixes or security "
"fixes."
msgstr ""

#: ../../core-developers/committing.rst:200
msgid "Backporting changes to an older version"
msgstr ""

#: ../../core-developers/committing.rst:202
msgid ""
"If it is determined that a pull request needs to be backported into one or "
"more of the maintenance branches, then a core developer can apply the label "
"``needs backport to X.Y`` to the pull request."
msgstr ""

#: ../../core-developers/committing.rst:206
msgid ""
"After the pull request has been merged, miss-islington (bot) will first try "
"to do the backport automatically. If miss-islington is unable to do it, then "
"the pull request author or the core developer who merged it should look into "
"backporting it themselves, using the backport generated by cherry_picker.py_ "
"as a starting point."
msgstr ""

#: ../../core-developers/committing.rst:212
msgid ""
"You can get the commit hash from the original pull request, or you can use "
"``git log`` on the ``main`` branch. To display the 10 most recent commit "
"hashes and their first line of the commit, use the following command::"
msgstr ""

#: ../../core-developers/committing.rst:220
msgid ""
"You can prefix the backport pull request with the branch, and reference the "
"pull request number from ``main``. Here is an example::"
msgstr ""

#: ../../core-developers/committing.rst:225
msgid ""
"Here \"gh-12345\" is the GitHub *issue* number, and \"GH-NNNN\" is the "
"number of the original *pull request*. Note that cherry_picker.py_ adds the "
"branch prefix automatically."
msgstr ""

#: ../../core-developers/committing.rst:229
msgid ""
"Once the backport pull request has been created, remove the ``needs backport "
"to X.Y`` label from the original pull request. (Only core developers and "
"members of the :ref:`Python Triage Team <triage-team>` can apply labels to "
"GitHub pull requests)."
msgstr ""

#: ../../core-developers/committing.rst:238
msgid "Reverting a merged pull request"
msgstr ""

#: ../../core-developers/committing.rst:240
msgid ""
"To revert a merged pull request, press the ``Revert`` button at the bottom "
"of the pull request. That will bring up the page to create a new pull "
"request where the commit can be reverted. It will also create a new branch "
"on the main CPython repository. Delete the branch once the pull request has "
"been merged."
msgstr ""

#: ../../core-developers/committing.rst:246
msgid ""
"Always include the reason for reverting the commit to help others understand "
"why it was done. The reason should be included as part of the commit "
"message. Here is an example::"
msgstr ""
