# Brazilian Portuguese translation for internals/compiler.po
# Copyright (C) 2011-2022, Python Software Foundation
# This file is distributed under the same license as the Python Developer's
# Guide package.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Developer's Guide\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-17 11:38-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: ../../internals/compiler.rst:5
msgid "Compiler design"
msgstr ""

#: ../../internals/compiler.rst:10
msgid "Abstract"
msgstr ""

#: ../../internals/compiler.rst:12
msgid ""
"In CPython, the compilation from source code to bytecode involves several "
"steps:"
msgstr ""

#: ../../internals/compiler.rst:14
msgid "Tokenize the source code (:cpy-file:`Parser/tokenizer.c`)."
msgstr ""

#: ../../internals/compiler.rst:15
msgid ""
"Parse the stream of tokens into an Abstract Syntax Tree (:cpy-file:`Parser/"
"parser.c`)."
msgstr ""

#: ../../internals/compiler.rst:17
msgid ""
"Transform AST into an instruction sequence (:cpy-file:`Python/compile.c`)."
msgstr ""

#: ../../internals/compiler.rst:18
msgid ""
"Construct a Control Flow Graph and apply optimizations to it (:cpy-file:"
"`Python/flowgraph.c`)."
msgstr ""

#: ../../internals/compiler.rst:19
msgid ""
"Emit bytecode based on the Control Flow Graph (:cpy-file:`Python/assemble."
"c`)."
msgstr ""

#: ../../internals/compiler.rst:21
msgid "This document outlines how these steps of the process work."
msgstr ""

#: ../../internals/compiler.rst:23
msgid ""
"This document only describes parsing in enough depth to explain what is "
"needed for understanding compilation.  This document provides a detailed, "
"though not exhaustive, view of the how the entire system works.  You will "
"most likely need to read some source code to have an exact understanding of "
"all details."
msgstr ""

#: ../../internals/compiler.rst:30
msgid "Parsing"
msgstr ""

#: ../../internals/compiler.rst:32
msgid ""
"As of Python 3.9, Python's parser is a PEG parser of a somewhat unusual "
"design. It is unusual in the sense that the parser's input is a stream of "
"tokens rather than a stream of characters which is more common with PEG "
"parsers."
msgstr ""

#: ../../internals/compiler.rst:37
msgid ""
"The grammar file for Python can be found in :cpy-file:`Grammar/python."
"gram`.  The definitions for literal tokens (such as ``:``, numbers, etc.) "
"can be found in :cpy-file:`Grammar/Tokens`. Various C files, including :cpy-"
"file:`Parser/parser.c` are generated from these."
msgstr ""

#: ../../internals/compiler.rst:45
msgid ":ref:`parser` for a detailed description of the parser."
msgstr ""

#: ../../internals/compiler.rst:47
msgid ":ref:`grammar` for a detailed description of the grammar."
msgstr ""

#: ../../internals/compiler.rst:51
msgid "Abstract syntax trees (AST)"
msgstr ""

#: ../../internals/compiler.rst:-1
msgid "Green Tree Snakes"
msgstr ""

#: ../../internals/compiler.rst:57
msgid ""
"See also `Green Tree Snakes - the missing Python AST docs <https://"
"greentreesnakes.readthedocs.io/en/latest/>`_ by Thomas Kluyver."
msgstr ""

#: ../../internals/compiler.rst:60
msgid ""
"The abstract syntax tree (AST) is a high-level representation of the program "
"structure without the necessity of containing the source code; it can be "
"thought of as an abstract representation of the source code.  The "
"specification of the AST nodes is specified using the Zephyr Abstract Syntax "
"Definition Language (ASDL) [Wang97]_."
msgstr ""

#: ../../internals/compiler.rst:66
msgid ""
"The definition of the AST nodes for Python is found in the file :cpy-file:"
"`Parser/Python.asdl`."
msgstr ""

#: ../../internals/compiler.rst:69
msgid ""
"Each AST node (representing statements, expressions, and several specialized "
"types, like list comprehensions and exception handlers) is defined by the "
"ASDL.  Most definitions in the AST correspond to a particular source "
"construct, such as an 'if' statement or an attribute lookup.  The definition "
"is independent of its realization in any particular programming language."
msgstr ""

#: ../../internals/compiler.rst:76
msgid ""
"The following fragment of the Python ASDL construct demonstrates the "
"approach and syntax::"
msgstr ""

#: ../../internals/compiler.rst:87
msgid ""
"The preceding example describes two different kinds of statements and an "
"expression: function definitions, return statements, and yield expressions. "
"All three kinds are considered of type ``stmt`` as shown by ``|`` separating "
"the various kinds.  They all take arguments of various kinds and amounts."
msgstr ""

#: ../../internals/compiler.rst:92
msgid ""
"Modifiers on the argument type specify the number of values needed; ``?`` "
"means it is optional, ``*`` means 0 or more, while no modifier means only "
"one value for the argument and it is required.  ``FunctionDef``, for "
"instance, takes an ``identifier`` for the *name*, ``arguments`` for *args*, "
"zero or more ``stmt`` arguments for *body*, and zero or more ``expr`` "
"arguments for *decorators*."
msgstr ""

#: ../../internals/compiler.rst:99
msgid ""
"Do notice that something like 'arguments', which is a node type, is "
"represented as a single AST node and not as a sequence of nodes as with stmt "
"as one might expect."
msgstr ""

#: ../../internals/compiler.rst:103
msgid ""
"All three kinds also have an 'attributes' argument; this is shown by the "
"fact that 'attributes' lacks a '|' before it."
msgstr ""

#: ../../internals/compiler.rst:106
msgid ""
"The statement definitions above generate the following C structure type:"
msgstr ""

#: ../../internals/compiler.rst:132
msgid ""
"Also generated are a series of constructor functions that allocate (in this "
"case) a ``stmt_ty`` struct with the appropriate initialization.  The "
"``kind`` field specifies which component of the union is initialized.  The "
"``FunctionDef()`` constructor function sets 'kind' to ``FunctionDef_kind`` "
"and initializes the *name*, *args*, *body*, and *attributes* fields."
msgstr ""

#: ../../internals/compiler.rst:140
msgid "Memory management"
msgstr ""

#: ../../internals/compiler.rst:142
msgid ""
"Before discussing the actual implementation of the compiler, a discussion of "
"how memory is handled is in order.  To make memory management simple, an "
"**arena** is used that pools memory in a single location for easy allocation "
"and removal.  This enables the removal of explicit memory deallocation.  "
"Because memory allocation for all needed memory in the compiler registers "
"that memory with the arena, a single call to free the arena is all that is "
"needed to completely free all memory used by the compiler."
msgstr ""

#: ../../internals/compiler.rst:150
msgid ""
"In general, unless you are working on the critical core of the compiler, "
"memory management can be completely ignored.  But if you are working at "
"either the very beginning of the compiler or the end, you need to care about "
"how the arena works.  All code relating to the arena is in either :cpy-file:"
"`Include/internal/pycore_pyarena.h` or :cpy-file:`Python/pyarena.c`."
msgstr ""

#: ../../internals/compiler.rst:156
msgid ""
"``PyArena_New()`` will create a new arena.  The returned ``PyArena`` "
"structure will store pointers to all memory given to it.  This does the "
"bookkeeping of what memory needs to be freed when the compiler is finished "
"with the memory it used. That freeing is done with ``PyArena_Free()``.  This "
"only needs to be called in strategic areas where the compiler exits."
msgstr ""

#: ../../internals/compiler.rst:162
msgid ""
"As stated above, in general you should not have to worry about memory "
"management when working on the compiler.  The technical details of memory "
"management have been designed to be hidden from you for most cases."
msgstr ""

#: ../../internals/compiler.rst:166
msgid ""
"The only exception comes about when managing a PyObject.  Since the rest of "
"Python uses reference counting, there is extra support added to the arena to "
"cleanup each PyObject that was allocated.  These cases are very rare.  "
"However, if you've allocated a PyObject, you must tell the arena about it by "
"calling ``PyArena_AddPyObject()``."
msgstr ""

#: ../../internals/compiler.rst:174
msgid "Source code to AST"
msgstr ""

#: ../../internals/compiler.rst:176
msgid ""
"The AST is generated from source code using the function "
"``_PyParser_ASTFromString()`` or ``_PyParser_ASTFromFile()`` (from :cpy-file:"
"`Parser/peg_api.c`) depending on the input type."
msgstr ""

#: ../../internals/compiler.rst:180
msgid ""
"After some checks, a helper function in :cpy-file:`Parser/parser.c` begins "
"applying production rules on the source code it receives; converting source "
"code to tokens and matching these tokens recursively to their corresponding "
"rule.  The production rule's corresponding rule function is called on every "
"match.  These rule functions follow the format :samp:`xx_rule`.  Where *xx* "
"is the grammar rule that the function handles and is automatically derived "
"from :cpy-file:`Grammar/python.gram` :cpy-file:`Tools/peg_generator/pegen/"
"c_generator.py`."
msgstr ""

#: ../../internals/compiler.rst:189
msgid ""
"Each rule function in turn creates an AST node as it goes along.  It does "
"this by allocating all the new nodes it needs, calling the proper AST node "
"creation functions for any required supporting functions and connecting them "
"as needed. This continues until all nonterminal symbols are replaced with "
"terminals.  If an error occurs, the rule functions backtrack and try another "
"rule function.  If there are no more rules, an error is set and the parsing "
"ends."
msgstr ""

#: ../../internals/compiler.rst:196
msgid ""
"The AST node creation helper functions have the name :samp:`_PyAST_{xx}` "
"where *xx* is the AST node that the function creates.  These are defined by "
"the ASDL grammar and contained in :cpy-file:`Python/Python-ast.c` (which is "
"generated by :cpy-file:`Parser/asdl_c.py` from :cpy-file:`Parser/Python."
"asdl`). This all leads to a sequence of AST nodes stored in ``asdl_seq`` "
"structs."
msgstr ""

#: ../../internals/compiler.rst:202
msgid ""
"To demonstrate everything explained so far, here's the rule function "
"responsible for a simple named import statement such as ``import sys``.  "
"Note that error-checking and debugging code has been omitted.  Removed parts "
"are represented by ``...``. Furthermore, some comments have been added for "
"explanation.  These comments may not be present in the actual code."
msgstr ""

#: ../../internals/compiler.rst:245
msgid ""
"To improve backtracking performance, some rules (chosen by applying a "
"``(memo)`` flag in the grammar file) are memoized.  Each rule function "
"checks if a memoized version exists and returns that if so, else it "
"continues in the manner stated in the previous paragraphs."
msgstr ""

#: ../../internals/compiler.rst:250
msgid ""
"There are macros for creating and using ``asdl_xx_seq *`` types, where *xx* "
"is a type of the ASDL sequence.  Three main types are defined manually -- "
"``generic``, ``identifier`` and ``int``.  These types are found in :cpy-file:"
"`Python/asdl.c` and its corresponding header file :cpy-file:`Include/"
"internal/pycore_asdl.h`.  Functions and macros for creating ``asdl_xx_seq "
"*`` types are as follows:"
msgstr ""

#: ../../internals/compiler.rst:257
msgid "``_Py_asdl_generic_seq_new(Py_ssize_t, PyArena *)``"
msgstr ""

#: ../../internals/compiler.rst:258
msgid "Allocate memory for an ``asdl_generic_seq`` of the specified length"
msgstr ""

#: ../../internals/compiler.rst:259
msgid "``_Py_asdl_identifier_seq_new(Py_ssize_t, PyArena *)``"
msgstr ""

#: ../../internals/compiler.rst:260
msgid "Allocate memory for an ``asdl_identifier_seq`` of the specified length"
msgstr ""

#: ../../internals/compiler.rst:262
msgid "``_Py_asdl_int_seq_new(Py_ssize_t, PyArena *)``"
msgstr ""

#: ../../internals/compiler.rst:262
msgid "Allocate memory for an ``asdl_int_seq`` of the specified length"
msgstr ""

#: ../../internals/compiler.rst:264
msgid ""
"In addition to the three types mentioned above, some ASDL sequence types are "
"automatically generated by :cpy-file:`Parser/asdl_c.py` and found in :cpy-"
"file:`Include/internal/pycore_ast.h`.  Macros for using both manually "
"defined and automatically generated ASDL sequence types are as follows:"
msgstr ""

#: ../../internals/compiler.rst:269
msgid "``asdl_seq_GET(asdl_xx_seq *, int)``"
msgstr ""

#: ../../internals/compiler.rst:270
msgid "Get item held at a specific position in an ``asdl_xx_seq``"
msgstr ""

#: ../../internals/compiler.rst:272
msgid "``asdl_seq_SET(asdl_xx_seq *, int, stmt_ty)``"
msgstr ""

#: ../../internals/compiler.rst:272
msgid "Set a specific index in an ``asdl_xx_seq`` to the specified value"
msgstr ""

#: ../../internals/compiler.rst:274
msgid ""
"Untyped counterparts exist for some of the typed macros.  These are useful "
"when a function needs to manipulate a generic ASDL sequence:"
msgstr ""

#: ../../internals/compiler.rst:277
msgid "``asdl_seq_GET_UNTYPED(asdl_seq *, int)``"
msgstr ""

#: ../../internals/compiler.rst:278
msgid "Get item held at a specific position in an ``asdl_seq``"
msgstr ""

#: ../../internals/compiler.rst:279
msgid "``asdl_seq_SET_UNTYPED(asdl_seq *, int, stmt_ty)``"
msgstr ""

#: ../../internals/compiler.rst:280
msgid "Set a specific index in an ``asdl_seq`` to the specified value"
msgstr ""

#: ../../internals/compiler.rst:282
msgid "``asdl_seq_LEN(asdl_seq *)``"
msgstr ""

#: ../../internals/compiler.rst:282
msgid "Return the length of an ``asdl_seq`` or ``asdl_xx_seq``"
msgstr ""

#: ../../internals/compiler.rst:284
msgid ""
"Note that typed macros and functions are recommended over their untyped "
"counterparts.  Typed macros carry out checks in debug mode and aid debugging "
"errors caused by incorrectly casting from ``void *``."
msgstr ""

#: ../../internals/compiler.rst:288
msgid ""
"If you are working with statements, you must also worry about keeping track "
"of what line number generated the statement.  Currently the line number is "
"passed as the last parameter to each ``stmt_ty`` function."
msgstr ""

#: ../../internals/compiler.rst:292
msgid ""
"The new PEG parser generates an AST directly without creating a parse tree. "
"``Python/ast.c`` is now only used to validate the AST for debugging purposes."
msgstr ""

#: ../../internals/compiler.rst:297
msgid ":pep:`617` (PEP 617 -- New PEG parser for CPython)"
msgstr ""

#: ../../internals/compiler.rst:301
msgid "Control flow graphs"
msgstr ""

#: ../../internals/compiler.rst:303
msgid ""
"A **control flow graph** (often referenced by its acronym, **CFG**) is a "
"directed graph that models the flow of a program.  A node of a CFG is not an "
"individual bytecode instruction, but instead represents a sequence of "
"bytecode instructions that always execute sequentially. Each node is called "
"a *basic block* and must always execute from start to finish, with a single "
"entry point at the beginning and a single exit point at the end.  If some "
"bytecode instruction *a* needs to jump to some other bytecode instruction "
"*b*, then *a* must occur at the end of its basic block, and *b* must occur "
"at the start of its basic block."
msgstr ""

#: ../../internals/compiler.rst:314
msgid "As an example, consider the following code snippet:"
msgstr ""

#: ../../internals/compiler.rst:325
msgid ""
"The ``x < 10`` guard is represented by its own basic block that compares "
"``x`` with ``10`` and then ends in a conditional jump based on the result of "
"the comparison.  This conditional jump allows the block to point to both the "
"body of the ``if`` and the body of the ``else``.  The ``if`` basic block "
"contains the ``f1()`` and ``f2()`` calls and points to the ``end()`` basic "
"block. The ``else`` basic block contains the ``g()`` call and similarly "
"points to the ``end()`` block."
msgstr ""

#: ../../internals/compiler.rst:333
msgid ""
"Note that more complex code in the guard, the ``if`` body, or the ``else`` "
"body may be represented by multiple basic blocks. For instance, short-"
"circuiting boolean logic in a guard like ``if x or y:`` will produce one "
"basic block that tests the truth value of ``x`` and then points both (1) to "
"the start of the ``if`` body and (2) to a different basic block that tests "
"the truth value of y."
msgstr ""

#: ../../internals/compiler.rst:340
msgid ""
"CFGs are usually one step away from final code output.  Code is directly "
"generated from the basic blocks (with jump targets adjusted based on the "
"output order) by doing a post-order depth-first search on the CFG following "
"the edges."
msgstr ""

#: ../../internals/compiler.rst:347
msgid "AST to CFG to bytecode"
msgstr ""

#: ../../internals/compiler.rst:349
msgid ""
"With the AST created, the next step is to create the CFG. The first step is "
"to convert the AST to Python bytecode without having jump targets resolved "
"to specific offsets (this is calculated when the CFG goes to final "
"bytecode). Essentially, this transforms the AST into Python bytecode with "
"control flow represented by the edges of the CFG."
msgstr ""

#: ../../internals/compiler.rst:355
msgid ""
"Conversion is done in two passes.  The first creates the namespace "
"(variables can be classified as local, free/cell for closures, or global).  "
"With that done, the second pass essentially flattens the CFG into a list and "
"calculates jump offsets for final output of bytecode."
msgstr ""

#: ../../internals/compiler.rst:360
msgid ""
"The conversion process is initiated by a call to the function "
"``_PyAST_Compile()`` in :cpy-file:`Python/compile.c`.  This function does "
"both the conversion of the AST to a CFG and outputting final bytecode from "
"the CFG. The AST to CFG step is handled mostly by two functions called by "
"``_PyAST_Compile()``; ``_PySymtable_Build()`` and ``compiler_mod()``. The "
"former is in :cpy-file:`Python/symtable.c` while the latter is :cpy-file:"
"`Python/compile.c`."
msgstr ""

#: ../../internals/compiler.rst:368
msgid ""
"``_PySymtable_Build()`` begins by entering the starting code block for the "
"AST (passed-in) and then calling the proper :samp:`symtable_visit_{xx}` "
"function (with *xx* being the AST node type).  Next, the AST tree is walked "
"with the various code blocks that delineate the reach of a local variable as "
"blocks are entered and exited using ``symtable_enter_block()`` and "
"``symtable_exit_block()``, respectively."
msgstr ""

#: ../../internals/compiler.rst:375
msgid ""
"Once the symbol table is created, it is time for CFG creation, whose code is "
"in :cpy-file:`Python/compile.c`.  This is handled by several functions that "
"break the task down by various AST node types.  The functions are all named :"
"samp:`compiler_visit_{xx}` where *xx* is the name of the node type (such as "
"``stmt``, ``expr``, etc.).  Each function receives a ``struct compiler *`` "
"and :samp:`{xx}_ty` where *xx* is the AST node type.  Typically these "
"functions consist of a large 'switch' statement, branching based on the kind "
"of node type passed to it.  Simple things are handled inline in the 'switch' "
"statement with more complex transformations farmed out to other functions "
"named :samp:`compiler_{xx}` with *xx* being a descriptive name of what is "
"being handled."
msgstr ""

#: ../../internals/compiler.rst:387
msgid ""
"When transforming an arbitrary AST node, use the ``VISIT()`` macro. The "
"appropriate :samp:`compiler_visit_{xx}` function is called, based on the "
"value passed in for <node type> (so :samp:`VISIT({c}, expr, {node})` calls :"
"samp:`compiler_visit_expr({c}, {node})`).  The ``VISIT_SEQ()`` macro is very "
"similar, but is called on AST node sequences (those values that were created "
"as arguments to a node that used the '*' modifier).  There is also "
"``VISIT_SLICE()`` just for handling slices."
msgstr ""

#: ../../internals/compiler.rst:395
msgid "Emission of bytecode is handled by the following macros:"
msgstr ""

#: ../../internals/compiler.rst:397
msgid "``ADDOP(struct compiler *, int)``"
msgstr ""

#: ../../internals/compiler.rst:398
msgid "add a specified opcode"
msgstr ""

#: ../../internals/compiler.rst:400
msgid "``ADDOP_NOLINE(struct compiler *, int)``"
msgstr ""

#: ../../internals/compiler.rst:400
msgid ""
"like ``ADDOP`` without a line number; used for artificial opcodes without no "
"corresponding token in the source code"
msgstr ""

#: ../../internals/compiler.rst:403
msgid "``ADDOP_IN_SCOPE(struct compiler *, int)``"
msgstr ""

#: ../../internals/compiler.rst:403
msgid ""
"like ``ADDOP``, but also exits current scope; used for adding return value "
"opcodes in lambdas and closures"
msgstr ""

#: ../../internals/compiler.rst:405
msgid "``ADDOP_I(struct compiler *, int, Py_ssize_t)``"
msgstr ""

#: ../../internals/compiler.rst:406
msgid "add an opcode that takes an integer argument"
msgstr ""

#: ../../internals/compiler.rst:413
msgid "``ADDOP_O(struct compiler *, int, PyObject *, TYPE)``"
msgstr ""

#: ../../internals/compiler.rst:408
msgid ""
"add an opcode with the proper argument based on the position of the "
"specified PyObject in PyObject sequence object, but with no handling of "
"mangled names; used for when you need to do named lookups of objects such as "
"globals, consts, or parameters where name mangling is not possible and the "
"scope of the name is known; *TYPE* is the name of PyObject sequence "
"(``names`` or ``varnames``)"
msgstr ""

#: ../../internals/compiler.rst:415
msgid "``ADDOP_N(struct compiler *, int, PyObject *, TYPE)``"
msgstr ""

#: ../../internals/compiler.rst:416
msgid "just like ``ADDOP_O``, but steals a reference to PyObject"
msgstr ""

#: ../../internals/compiler.rst:418
msgid "``ADDOP_NAME(struct compiler *, int, PyObject *, TYPE)``"
msgstr ""

#: ../../internals/compiler.rst:418
msgid ""
"just like ``ADDOP_O``, but name mangling is also handled; used for attribute "
"loading or importing based on name"
msgstr ""

#: ../../internals/compiler.rst:421
msgid "``ADDOP_LOAD_CONST(struct compiler *, PyObject *)``"
msgstr ""

#: ../../internals/compiler.rst:421
msgid ""
"add the ``LOAD_CONST`` opcode with the proper argument based on the position "
"of the specified PyObject in the consts table."
msgstr ""

#: ../../internals/compiler.rst:423
msgid "``ADDOP_LOAD_CONST_NEW(struct compiler *, PyObject *)``"
msgstr ""

#: ../../internals/compiler.rst:424
msgid "just like ``ADDOP_LOAD_CONST_NEW``, but steals a reference to PyObject"
msgstr ""

#: ../../internals/compiler.rst:425
msgid "``ADDOP_JUMP(struct compiler *, int, basicblock *)``"
msgstr ""

#: ../../internals/compiler.rst:426
msgid "create a jump to a basic block"
msgstr ""

#: ../../internals/compiler.rst:428
msgid "``ADDOP_JUMP_NOLINE(struct compiler *, int, basicblock *)``"
msgstr ""

#: ../../internals/compiler.rst:428
msgid ""
"like ``ADDOP_JUMP`` without a line number; used for artificial jumps without "
"no corresponding token in the source code."
msgstr ""

#: ../../internals/compiler.rst:432
msgid "``ADDOP_JUMP_COMPARE(struct compiler *, cmpop_ty)``"
msgstr ""

#: ../../internals/compiler.rst:431
msgid ""
"depending on the second argument, add an ``ADDOP_I`` with either an "
"``IS_OP``, ``CONTAINS_OP``, or ``COMPARE_OP`` opcode."
msgstr ""

#: ../../internals/compiler.rst:434
msgid ""
"Several helper functions that will emit bytecode and are named :samp:"
"`compiler_{xx}()` where *xx* is what the function helps with (``list``, "
"``boolop``, etc.).  A rather useful one is ``compiler_nameop()``. This "
"function looks up the scope of a variable and, based on the expression "
"context, emits the proper opcode to load, store, or delete the variable."
msgstr ""

#: ../../internals/compiler.rst:441
msgid ""
"As for handling the line number on which a statement is defined, this is "
"handled by ``compiler_visit_stmt()`` and thus is not a worry."
msgstr ""

#: ../../internals/compiler.rst:444
msgid ""
"Once the CFG is created, it must be flattened and then final emission of "
"bytecode occurs.  Flattening is handled using a post-order depth-first "
"search.  Once flattened, jump offsets are backpatched based on the "
"flattening and then a ``PyCodeObject`` is created.  All of this is handled "
"by calling ``assemble()``."
msgstr ""

#: ../../internals/compiler.rst:452
msgid "Code objects"
msgstr ""

#: ../../internals/compiler.rst:454
msgid ""
"The result of ``PyAST_CompileObject()`` is a ``PyCodeObject`` which is "
"defined in :cpy-file:`Include/cpython/code.h`.  And with that you now have "
"executable Python bytecode!"
msgstr ""

#: ../../internals/compiler.rst:458
msgid ""
"The code objects (byte code) are executed in :cpy-file:`Python/ceval.c`.  "
"This file will also need a new case statement for the new opcode in the big "
"switch statement in ``_PyEval_EvalFrameDefault()``."
msgstr ""

#: ../../internals/compiler.rst:464
msgid "Important files"
msgstr ""

#: ../../internals/compiler.rst:466
msgid ":cpy-file:`Parser/`"
msgstr ""

#: ../../internals/compiler.rst:468
msgid ":cpy-file:`Parser/Python.asdl`: ASDL syntax file."
msgstr ""

#: ../../internals/compiler.rst:470
msgid ""
":cpy-file:`Parser/asdl.py`: Parser for ASDL definition files. Reads in an "
"ASDL description and parses it into an AST that describes it."
msgstr ""

#: ../../internals/compiler.rst:473
msgid ""
":cpy-file:`Parser/asdl_c.py`: Generate C code from an ASDL description. "
"Generates :cpy-file:`Python/Python-ast.c` and :cpy-file:`Include/internal/"
"pycore_ast.h`."
msgstr ""

#: ../../internals/compiler.rst:477
msgid ""
":cpy-file:`Parser/parser.c`: The new PEG parser introduced in Python 3.9. "
"Generated by :cpy-file:`Tools/peg_generator/pegen/c_generator.py` from the "
"grammar :cpy-file:`Grammar/python.gram`.  Creates the AST from source code.  "
"Rule functions for their corresponding production rules are found here."
msgstr ""

#: ../../internals/compiler.rst:483
msgid ""
":cpy-file:`Parser/peg_api.c`: Contains high-level functions which are used "
"by the interpreter to create an AST from source code."
msgstr ""

#: ../../internals/compiler.rst:486
msgid ""
":cpy-file:`Parser/pegen.c`: Contains helper functions which are used by "
"functions in :cpy-file:`Parser/parser.c` to construct the AST. Also contains "
"helper functions which help raise better error messages when parsing source "
"code."
msgstr ""

#: ../../internals/compiler.rst:491
msgid ""
":cpy-file:`Parser/pegen.h`: Header file for the corresponding :cpy-file:"
"`Parser/pegen.c`. Also contains definitions of the ``Parser`` and ``Token`` "
"structs."
msgstr ""

#: ../../internals/compiler.rst:495
msgid ":cpy-file:`Python/`"
msgstr ""

#: ../../internals/compiler.rst:497
msgid ""
":cpy-file:`Python/Python-ast.c`: Creates C structs corresponding to the ASDL "
"types.  Also contains code for marshalling AST nodes (core ASDL types have "
"marshalling code in :cpy-file:`Python/asdl.c`). \"File automatically "
"generated by :cpy-file:`Parser/asdl_c.py`\". This file must be committed "
"separately after every grammar change is committed since the ``__version__`` "
"value is set to the latest grammar change revision number."
msgstr ""

#: ../../internals/compiler.rst:505
msgid ""
":cpy-file:`Python/asdl.c`: Contains code to handle the ASDL sequence type. "
"Also has code to handle marshalling the core ASDL types, such as number and "
"identifier.  Used by :cpy-file:`Python/Python-ast.c` for marshalling AST "
"nodes."
msgstr ""

#: ../../internals/compiler.rst:510
msgid ":cpy-file:`Python/ast.c`: Used for validating the AST."
msgstr ""

#: ../../internals/compiler.rst:512
msgid ":cpy-file:`Python/ast_opt.c`: Optimizes the AST."
msgstr ""

#: ../../internals/compiler.rst:514
msgid ""
":cpy-file:`Python/ast_unparse.c`: Converts the AST expression node back into "
"a string (for string annotations)."
msgstr ""

#: ../../internals/compiler.rst:517
msgid ":cpy-file:`Python/ceval.c`: Executes byte code (aka, eval loop)."
msgstr ""

#: ../../internals/compiler.rst:519
msgid ":cpy-file:`Python/compile.c`: Emits bytecode based on the AST."
msgstr ""

#: ../../internals/compiler.rst:521
msgid ":cpy-file:`Python/symtable.c`: Generates a symbol table from AST."
msgstr ""

#: ../../internals/compiler.rst:523
msgid ""
":cpy-file:`Python/pyarena.c`: Implementation of the arena memory manager."
msgstr ""

#: ../../internals/compiler.rst:525
msgid ""
":cpy-file:`Python/opcode_targets.h`: One of the files that must be modified "
"if :cpy-file:`Lib/opcode.py` is."
msgstr ""

#: ../../internals/compiler.rst:528
msgid ":cpy-file:`Include/`"
msgstr ""

#: ../../internals/compiler.rst:530
msgid ""
":cpy-file:`Include/cpython/code.h`: Header file for :cpy-file:`Objects/"
"codeobject.c`; contains definition of ``PyCodeObject``."
msgstr ""

#: ../../internals/compiler.rst:533
msgid ""
":cpy-file:`Include/opcode.h`: One of the files that must be modified if :cpy-"
"file:`Lib/opcode.py` is."
msgstr ""

#: ../../internals/compiler.rst:536
msgid ""
":cpy-file:`Include/internal/pycore_ast.h`: Contains the actual definitions "
"of the C structs as generated by :cpy-file:`Python/Python-ast.c`. "
"\"Automatically generated by :cpy-file:`Parser/asdl_c.py`\"."
msgstr ""

#: ../../internals/compiler.rst:540
msgid ""
":cpy-file:`Include/internal/pycore_asdl.h`: Header for the corresponding :"
"cpy-file:`Python/ast.c`."
msgstr ""

#: ../../internals/compiler.rst:543
msgid ""
":cpy-file:`Include/internal/pycore_ast.h`: Declares ``_PyAST_Validate()`` "
"external (from :cpy-file:`Python/ast.c`)."
msgstr ""

#: ../../internals/compiler.rst:546
msgid ""
":cpy-file:`Include/internal/pycore_symtable.h`: Header for :cpy-file:`Python/"
"symtable.c`.  ``struct symtable`` and ``PySTEntryObject`` are defined here."
msgstr ""

#: ../../internals/compiler.rst:550
msgid ""
":cpy-file:`Include/internal/pycore_parser.h`: Header for the corresponding :"
"cpy-file:`Parser/peg_api.c`."
msgstr ""

#: ../../internals/compiler.rst:553
msgid ""
":cpy-file:`Include/internal/pycore_pyarena.h`: Header file for the "
"corresponding :cpy-file:`Python/pyarena.c`."
msgstr ""

#: ../../internals/compiler.rst:556
msgid ":cpy-file:`Objects/`"
msgstr ""

#: ../../internals/compiler.rst:558
msgid ""
":cpy-file:`Objects/codeobject.c`: Contains PyCodeObject-related code "
"(originally in :cpy-file:`Python/compile.c`)."
msgstr ""

#: ../../internals/compiler.rst:561
msgid ""
":cpy-file:`Objects/frameobject.c`: Contains the ``frame_setlineno()`` "
"function which should determine whether it is allowed to make a jump between "
"two points in a bytecode."
msgstr ""

#: ../../internals/compiler.rst:565
msgid ":cpy-file:`Lib/`"
msgstr ""

#: ../../internals/compiler.rst:567
msgid ""
":cpy-file:`Lib/opcode.py`: Master list of bytecode; if this file is modified "
"you must modify several other files accordingly"
msgstr ""

#: ../../internals/compiler.rst:570
msgid ""
":cpy-file:`Lib/importlib/_bootstrap_external.py`: Home of the magic number "
"(named ``MAGIC_NUMBER``) for bytecode versioning."
msgstr ""

#: ../../internals/compiler.rst:575
msgid "Objects"
msgstr ""

#: ../../internals/compiler.rst:577
msgid ":cpy-file:`Objects/locations.md`: Describes the location table"
msgstr ""

#: ../../internals/compiler.rst:578
msgid ":cpy-file:`Objects/frame_layout.md`: Describes the frame stack"
msgstr ""

#: ../../internals/compiler.rst:579
msgid ""
":cpy-file:`Objects/object_layout.md`: Descibes object layout for 3.11 and "
"later"
msgstr ""

#: ../../internals/compiler.rst:580
msgid ""
":cpy-file:`Objects/exception_handling_notes.txt`: Exception handling notes"
msgstr ""

#: ../../internals/compiler.rst:584
msgid "Specializing Adaptive Interpreter"
msgstr ""

#: ../../internals/compiler.rst:586
msgid ""
"Adding a specializing, adaptive interpreter to CPython will bring "
"significant performance improvements. These documents provide more "
"information:"
msgstr ""

#: ../../internals/compiler.rst:589
msgid ":pep:`659`: Specializing Adaptive Interpreter"
msgstr ""

#: ../../internals/compiler.rst:590
msgid ""
":cpy-file:`Python/adaptive.md`: Adding or extending a family of adaptive "
"instructions"
msgstr ""

#: ../../internals/compiler.rst:594
msgid "References"
msgstr ""

#: ../../internals/compiler.rst:596
msgid ""
"Daniel C. Wang, Andrew W. Appel, Jeff L. Korn, and Chris S. Serra.  `The "
"Zephyr Abstract Syntax Description Language.`_ In Proceedings of the "
"Conference on Domain-Specific Languages, pp. 213--227, 1997."
msgstr ""
