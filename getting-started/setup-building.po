# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2022, Python Software Foundation
# This file is distributed under the same license as the Python Developer's
# Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Developer's Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-08 22:51-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../getting-started/setup-building.rst:6
msgid "Setup and Building"
msgstr ""

#: ../../getting-started/setup-building.rst:10
msgid ""
"These instructions cover how to get a working copy of the source code and"
" a compiled version of the CPython interpreter (CPython is the version of"
" Python available from https://www.python.org/). It also gives an "
"overview of the directory structure of the CPython source code."
msgstr ""

#: ../../getting-started/setup-building.rst:15
msgid ""
"Alternatively, if you have `Docker <https://www.docker.com/>`_ installed "
"you might want to use `our official images <https://gitlab.com/python-"
"devs/ci-images/blob/main/README.md>`_.  These contain the latest releases"
" of several Python versions, along with git head, and are provided for "
"development and testing purposes only."
msgstr ""

#: ../../getting-started/setup-building.rst:23
msgid ""
"The :ref:`quick-reference` gives brief summary of the process from "
"installing git to submitting a pull request."
msgstr ""

#: ../../getting-started/setup-building.rst:29
msgid "Install ``git``"
msgstr ""

#: ../../getting-started/setup-building.rst:31
msgid ""
"CPython is developed using `git <https://git-scm.com>`_ for version "
"control. The git command line program is named ``git``; this is also used"
" to refer to git itself. git is easily available for all common operating"
" systems."
msgstr ""

#: ../../getting-started/setup-building.rst:35
msgid "**Install**"
msgstr ""

#: ../../getting-started/setup-building.rst:37
msgid ""
"As the CPython repo is hosted on GitHub, please refer to either the "
"`GitHub setup instructions <https://docs.github.com/en/get-"
"started/quickstart/set-up-git>`_ or the `git project instructions <https"
"://git-scm.com>`_ for step-by-step installation directions. You may also "
"want to consider a graphical client such as `TortoiseGit "
"<https://tortoisegit.org/>`_ or `GitHub Desktop "
"<https://desktop.github.com/>`_."
msgstr ""

#: ../../getting-started/setup-building.rst:44
msgid "**Configure**"
msgstr ""

#: ../../getting-started/setup-building.rst:46
msgid ""
"Configure :ref:`your name and email <set-up-name-email>` and create `an "
"SSH key <https://docs.github.com/en/authentication/connecting-to-github-"
"with-ssh/adding-a-new-ssh-key-to-your-github-account>`_ as this will "
"allow you to interact with GitHub without typing a username and password "
"each time you execute a command, such as ``git pull``, ``git push``, or "
"``git fetch``.  On Windows, you should also :ref:`enable autocrlf "
"<autocrlf>`."
msgstr ""

#: ../../getting-started/setup-building.rst:57
msgid "Get the source code"
msgstr ""

#: ../../getting-started/setup-building.rst:59
msgid ""
"The CPython repo is hosted on GitHub. To get a copy of the source code "
"you should :ref:`fork the Python repository on GitHub <fork-cpython>`, "
":ref:`create a local clone of your personal fork, and configure the "
"remotes <clone-your-fork>`."
msgstr ""

#: ../../getting-started/setup-building.rst:63
msgid "You will only need to execute these steps once per machine:"
msgstr ""

#: ../../getting-started/setup-building.rst:65
msgid "Go to https://github.com/python/cpython."
msgstr ""

#: ../../getting-started/setup-building.rst:67
msgid "Press :guilabel:`Fork` on the top right."
msgstr ""

#: ../../getting-started/setup-building.rst:69
msgid ""
"When asked where to fork the repository, choose to fork it to your "
"username."
msgstr ""

#: ../../getting-started/setup-building.rst:71
msgid ""
"Your fork will be created at "
":samp:`https://github.com/{<username>}/cpython`."
msgstr ""

#: ../../getting-started/setup-building.rst:73
msgid "Clone your GitHub fork (replace ``<username>`` with your username)::"
msgstr ""

#: ../../getting-started/setup-building.rst:77
msgid "(You can use both SSH-based or HTTPS-based URLs.)"
msgstr ""

#: ../../getting-started/setup-building.rst:82
msgid ""
"Add an ``upstream`` remote, then configure ``git`` to pull ``main`` from "
"``upstream`` and always push to ``origin``::"
msgstr ""

#: ../../getting-started/setup-building.rst:90
msgid "Verify that your setup is correct::"
msgstr ""

#: ../../getting-started/setup-building.rst:100
msgid ""
"For more information about these commands see :ref:`Git Bootcamp and "
"Cheat Sheat <git-boot-camp>`."
msgstr ""

#: ../../getting-started/setup-building.rst:103
msgid ""
"If you did everything correctly, you should now have a copy of the code "
"in the ``cpython`` directory and two remotes that refer to your own "
"GitHub fork (``origin``) and the official CPython repository "
"(``upstream``)."
msgstr ""

#: ../../getting-started/setup-building.rst:109
msgid ""
"If you want a working copy of an already-released version of Python, "
"i.e., a version in :ref:`maintenance mode <maintbranch>`, you can "
"checkout a release branch. For instance, to checkout a working copy of "
"Python 3.8, do ``git switch 3.8``."
msgstr ""

#: ../../getting-started/setup-building.rst:114
msgid "You will need to re-compile CPython when you do such an update."
msgstr ""

#: ../../getting-started/setup-building.rst:116
msgid ""
"Do note that CPython will notice that it is being run from a working "
"copy. This means that if you edit CPython's source code in your working "
"copy, changes to Python code will be picked up by the interpreter for "
"immediate use and testing.  (If you change C code, you will need to "
"recompile the affected files as described below.)"
msgstr ""

#: ../../getting-started/setup-building.rst:122
msgid ""
"Patches for the documentation can be made from the same repository; see "
":ref:`documenting`."
msgstr ""

#: ../../getting-started/setup-building.rst:129
msgid "Compile and build"
msgstr ""

#: ../../getting-started/setup-building.rst:131
msgid ""
"CPython provides several compilation flags which help with debugging "
"various things. While all of the known flags can be found in the "
"``Misc/SpecialBuilds.txt`` file, the most critical one is the "
"``Py_DEBUG`` flag which creates what is known as a \"pydebug\" build. "
"This flag turns on various extra sanity checks which help catch common "
"issues. The use of the flag is so common that turning on the flag is a "
"basic compile option."
msgstr ""

#: ../../getting-started/setup-building.rst:138
msgid ""
"You should always develop under a pydebug build of CPython (the only "
"instance of when you shouldn't is if you are taking performance "
"measurements). Even when working only on pure Python code the pydebug "
"build provides several useful checks that one should not skip."
msgstr ""

#: ../../getting-started/setup-building.rst:143
msgid ""
"The effects of various configure and build flags are documented in the "
"`Python configure docs "
"<https://docs.python.org/dev/using/configure.html>`_."
msgstr ""

#: ../../getting-started/setup-building.rst:149
msgid "UNIX"
msgstr ""

#: ../../getting-started/setup-building.rst:151
msgid ""
"The core CPython interpreter only needs a C compiler to be built, "
"however, some of the extension modules will need development headers for "
"additional libraries (such as the ``zlib`` library for compression). "
"Depending on what you intend to work on, you might need to install these "
"additional requirements so that the compiled interpreter supports the "
"desired features."
msgstr ""

#: ../../getting-started/setup-building.rst:158
msgid ""
"If you want to install these optional dependencies, consult the :ref"
":`build-dependencies` section below."
msgstr ""

#: ../../getting-started/setup-building.rst:161
msgid ""
"If you don't need to install them, the basic steps for building Python "
"for development is to configure it and then compile it."
msgstr ""

#: ../../getting-started/setup-building.rst:164
msgid "Configuration is typically::"
msgstr ""

#: ../../getting-started/setup-building.rst:168
msgid ""
"More flags are available to ``configure``, but this is the minimum you "
"should do to get a pydebug build of CPython."
msgstr ""

#: ../../getting-started/setup-building.rst:172
msgid ""
"You might need to run ``make clean`` before or after re-running "
"``configure`` in a particular build directory."
msgstr ""

#: ../../getting-started/setup-building.rst:175
msgid "Once ``configure`` is done, you can then compile CPython with::"
msgstr ""

#: ../../getting-started/setup-building.rst:179
msgid ""
"This will build CPython with only warnings and errors being printed to "
"stderr and utilize up to 2 CPU cores. If you are using a multi-core "
"machine with more than 2 cores (or a single-core machine), you can adjust"
" the number passed into the ``-j`` flag to match the number of cores you "
"have (or if your version of Make supports it, you can use ``-j`` without "
"a number and Make will not limit the number of steps that can run "
"simultaneously.)."
msgstr ""

#: ../../getting-started/setup-building.rst:186
msgid ""
"At the end of the build you should see a success message, possibly "
"followed by a list of extension modules that haven't been built because "
"their dependencies were missing:"
msgstr ""

#: ../../getting-started/setup-building.rst:201
msgid ""
"If the build failed and you are using a C89 or C99-compliant compiler, "
"please open a bug report on the `issue tracker`_."
msgstr ""

#: ../../getting-started/setup-building.rst:204
msgid ""
"If you decide to :ref:`build-dependencies`, you will need to re-run both "
"``configure`` and ``make``."
msgstr ""

#: ../../getting-started/setup-building.rst:209
msgid ""
"Once CPython is done building you will then have a working build that can"
" be run in-place; ``./python`` on most machines (and what is used in all "
"examples), ``./python.exe`` wherever a case-insensitive filesystem is "
"used (e.g. on macOS by default), in order to avoid conflicts with the "
"``Python`` directory. There is normally no need to install your built "
"copy of Python! The interpreter will realize where it is being run from "
"and thus use the files found in the working copy.  If you are worried you"
" might accidentally install your working copy build, you can add "
"``--prefix=/tmp/python`` to the configuration step.  When running from "
"your working directory, it is best to avoid using the ``--enable-shared``"
" flag to ``configure``; unless you are very careful, you may accidentally"
" run with code from an older, installed shared Python library rather than"
" from the interpreter you just built."
msgstr ""

#: ../../getting-started/setup-building.rst:225
msgid "Clang"
msgstr ""

#: ../../getting-started/setup-building.rst:227
msgid ""
"If you are using clang_ to build CPython, some flags you might want to "
"set to quiet some standard warnings which are specifically superfluous to"
" CPython are ``-Wno-unused-value -Wno-empty-body -Qunused-arguments``. "
"You can set your ``CFLAGS`` environment variable to these flags when "
"running ``configure``."
msgstr ""

#: ../../getting-started/setup-building.rst:232
msgid ""
"If you are using clang_ with ccache_, turn off the noisy ``parentheses-"
"equality`` warnings with the ``-Wno-parentheses-equality`` flag. These "
"warnings are caused by clang not  having enough information to detect "
"that extraneous parentheses in expanded macros are valid, because the "
"preprocessing is done separately by ccache."
msgstr ""

#: ../../getting-started/setup-building.rst:238
msgid ""
"If you are using LLVM 2.8, also use the ``-no-integrated-as`` flag in "
"order to build the :py:mod:`ctypes` module (without the flag the rest of "
"CPython will still build properly)."
msgstr ""

#: ../../getting-started/setup-building.rst:246
msgid "Windows"
msgstr ""

#: ../../getting-started/setup-building.rst:248
msgid ""
"If you are using the Windows Subsystem for Linux (WSL), :ref:`clone the "
"repository <checkout>` from a native Windows shell program like "
"PowerShell or the ``cmd.exe`` command prompt, and use a build of Git "
"targeted for Windows, e.g. the `Git for Windows download from the "
"official Git website`_. Otherwise, Visual Studio will not be able to find"
" all the project's files and will fail the build."
msgstr ""

#: ../../getting-started/setup-building.rst:256
msgid ""
"For a concise step by step summary of building Python on Windows, you can"
" read `Victor Stinner's guide`_."
msgstr ""

#: ../../getting-started/setup-building.rst:259
msgid ""
"All supported versions of Python can be built using Microsoft Visual "
"Studio 2017 or later. You can download and use any of the free or paid "
"versions of `Visual Studio`_."
msgstr ""

#: ../../getting-started/setup-building.rst:263
msgid ""
"When installing it, select the :guilabel:`Python development` workload "
"and the optional :guilabel:`Python native development tools` component to"
" obtain all of the necessary build tools. You can find Git for Windows on"
" the :guilabel:`Individual components` tab if you don't already have it "
"installed."
msgstr ""

#: ../../getting-started/setup-building.rst:269
msgid ""
"If you want to build MSI installers, be aware that the build toolchain "
"for them has a dependency on the Microsoft .NET Framework Version 3.5 "
"(which may not be included on recent versions of Windows, such as Windows"
" 10). If you are building on a recent Windows version, use the Control "
"Panel (:menuselection:`Programs --> Programs and Features --> Turn "
"Windows Features on or off`) and ensure that the entry :guilabel:`.NET "
"Framework 3.5 (includes .NET 2.0 and 3.0)` is enabled."
msgstr ""

#: ../../getting-started/setup-building.rst:277
msgid ""
"Your first build should use the command line to ensure any external "
"dependencies are downloaded:"
msgstr ""

#: ../../getting-started/setup-building.rst:284
msgid ""
"The above command line build uses the ``-c Debug`` argument to build in "
"the ``Debug`` configuration, which enables checks and assertions helpful "
"for developing Python. By default, it builds in the ``Release`` "
"configuration and for the 64-bit ``x64`` platform rather than 32-bit "
"``Win32``; use ``-c`` and ``-p`` to control build config and platform, "
"respectively."
msgstr ""

#: ../../getting-started/setup-building.rst:291
msgid ""
"After this build succeeds, you can open the ``PCbuild\\pcbuild.sln`` "
"solution in the Visual Studio IDE to continue development, if you prefer."
" When building in Visual Studio, make sure to select build settings that "
"match what you used with the script (the :guilabel:`Debug` configuration "
"and the :guilabel:`x64` platform) from the dropdown menus in the toolbar."
msgstr ""

#: ../../getting-started/setup-building.rst:300
msgid ""
"If you need to change the build configuration or platform, build once "
"with the ``build.bat`` script set to those options first before building "
"with them in VS to ensure all files are rebuilt properly, or you may "
"encouter errors when loading modules that were not rebuilt."
msgstr ""

#: ../../getting-started/setup-building.rst:305
msgid ""
"Avoid selecting the ``PGInstrument`` and ``PGUpdate`` configurations, as "
"these are intended for PGO builds and not for normal development."
msgstr ""

#: ../../getting-started/setup-building.rst:308
msgid "You can run the build of Python you've compiled with:"
msgstr ""

#: ../../getting-started/setup-building.rst:314
msgid ""
"See the `PCBuild readme`_ for more details on what other software is "
"necessary and how to build."
msgstr ""

#: ../../getting-started/setup-building.rst:326
msgid "Install dependencies"
msgstr ""

#: ../../getting-started/setup-building.rst:328
msgid ""
"This section explains how to install additional extensions (e.g. "
"``zlib``) on :ref:`Linux <deps-on-linux>` and :ref:`macOS`.  On Windows, "
"extensions are already included and built automatically."
msgstr ""

#: ../../getting-started/setup-building.rst:335
msgid "Linux"
msgstr ""

#: ../../getting-started/setup-building.rst:337
msgid ""
"For UNIX based systems, we try to use system libraries whenever "
"available. This means optional components will only build if the relevant"
" system headers are available. The best way to obtain the appropriate "
"headers will vary by distribution, but the appropriate commands for some "
"popular distributions are below."
msgstr ""

#: ../../getting-started/setup-building.rst:343
msgid ""
"On **Fedora**, **Red Hat Enterprise Linux** and other ``yum`` based "
"systems::"
msgstr ""

#: ../../getting-started/setup-building.rst:348
msgid "On **Fedora** and other ``DNF`` based systems::"
msgstr ""

#: ../../getting-started/setup-building.rst:353
msgid ""
"On **Debian**, **Ubuntu**, and other ``apt`` based systems, try to get "
"the dependencies for the Python you're working on by using the ``apt`` "
"command."
msgstr ""

#: ../../getting-started/setup-building.rst:356
msgid ""
"First, make sure you have enabled the source packages in the sources "
"list. You can do this by adding the location of the source packages, "
"including URL, distribution name and component name, to "
"``/etc/apt/sources.list``. Take Ubuntu 22.04 LTS (Jammy Jellyfish) for "
"example::"
msgstr ""

#: ../../getting-started/setup-building.rst:363
msgid "Alternatively, uncomment lines with ``deb-src`` using an editor, e.g.::"
msgstr ""

#: ../../getting-started/setup-building.rst:367
msgid ""
"For other distributions, like Debian, change the URL and names to "
"correspond with the specific distribution."
msgstr ""

#: ../../getting-started/setup-building.rst:370
msgid "Then you should update the packages index::"
msgstr ""

#: ../../getting-started/setup-building.rst:374
msgid "Now you can install the build dependencies via ``apt``::"
msgstr ""

#: ../../getting-started/setup-building.rst:379
msgid ""
"If you want to build all optional modules, install the following packages"
" and their dependencies::"
msgstr ""

#: ../../getting-started/setup-building.rst:391
msgid "macOS and OS X"
msgstr ""

#: ../../getting-started/setup-building.rst:393
msgid ""
"For **macOS systems** (versions 10.12+) and **OS X 10.9 and later**, the "
"Developer Tools can be downloaded and installed automatically; you do not"
" need to download the complete Xcode application."
msgstr ""

#: ../../getting-started/setup-building.rst:397
msgid "If necessary, run the following::"
msgstr ""

#: ../../getting-started/setup-building.rst:401
msgid ""
"This will also ensure that the system header files are installed into "
"``/usr/include``."
msgstr ""

#: ../../getting-started/setup-building.rst:404
msgid ""
"On **Mac OS X systems** (versions 10.0 - 10.7) and **OS X 10.8**, use the"
" C compiler and other development utilities provided by Apple's Xcode "
"Developer Tools. The Developer Tools are not shipped with Mac OS X."
msgstr ""

#: ../../getting-started/setup-building.rst:408
msgid ""
"For these **older releases (versions 10.0 - 10.8)**, you will need to "
"download either the correct version of the Command Line Tools, if "
"available, or install them from the full Xcode app or package for that OS"
" X release.  Older versions may be available either as a no-cost download"
" through Apple's App Store or from `the Apple Developer web site "
"<https://developer.apple.com/>`_."
msgstr ""

#: ../../getting-started/setup-building.rst:418
msgid ""
"Also note that OS X does not include several libraries used by the Python"
" standard library, including ``libzma``, so expect to see some extension "
"module build failures unless you install local copies of them.  As of OS "
"X 10.11, Apple no longer provides header files for the deprecated system "
"version of OpenSSL which means that you will not be able to build the "
"``_ssl`` extension. One solution is to install these libraries from a "
"third-party package manager, like Homebrew_ or MacPorts_, and then add "
"the appropriate paths for the header and library files to your "
"``configure`` command.  For example,"
msgstr ""

#: ../../getting-started/setup-building.rst:427
msgid "with **Homebrew**::"
msgstr ""

#: ../../getting-started/setup-building.rst:431
msgid "For Python 3.10 and newer::"
msgstr ""

#: ../../getting-started/setup-building.rst:440
msgid "For Python versions 3.9 through 3.7::"
msgstr ""

#: ../../getting-started/setup-building.rst:450
#: ../../getting-started/setup-building.rst:464
msgid "and ``make``::"
msgstr ""

#: ../../getting-started/setup-building.rst:454
msgid "or **MacPorts**::"
msgstr ""

#: ../../getting-started/setup-building.rst:458
msgid "and ``configure``::"
msgstr ""

#: ../../getting-started/setup-building.rst:468
msgid ""
"There will sometimes be optional modules added for a new release which "
"won't yet be identified in the OS level build dependencies. In those "
"cases, just ask for assistance on the core-mentorship list."
msgstr ""

#: ../../getting-started/setup-building.rst:472
msgid ""
"Explaining how to build optional dependencies on a UNIX based system "
"without root access is beyond the scope of this guide."
msgstr ""

#: ../../getting-started/setup-building.rst:475
msgid ""
"For more details on various options and considerations for building, "
"refer to the `macOS README "
"<https://github.com/python/cpython/blob/main/Mac/README.rst>`_."
msgstr ""

#: ../../getting-started/setup-building.rst:482
msgid ""
"While you need a C compiler to build CPython, you don't need any "
"knowledge of the C language to contribute!  Vast areas of CPython are "
"written completely in Python: as of this writing, CPython contains "
"slightly more Python code than C."
msgstr ""

#: ../../getting-started/setup-building.rst:491
msgid "Regenerate ``configure``"
msgstr ""

#: ../../getting-started/setup-building.rst:493
msgid ""
"If a change is made to Python which relies on some POSIX system-specific "
"functionality (such as using a new system call), it is necessary to "
"update the ``configure`` script to test for availability of the "
"functionality."
msgstr ""

#: ../../getting-started/setup-building.rst:497
msgid ""
"Python's ``configure`` script is generated from ``configure.ac`` using "
"Autoconf. Instead of editing ``configure``, edit ``configure.ac`` and "
"then run ``autoreconf`` to regenerate ``configure`` and a number of other"
" files (such as ``pyconfig.h``)."
msgstr ""

#: ../../getting-started/setup-building.rst:502
msgid ""
"When submitting a patch with changes made to ``configure.ac``, you should"
" also include the generated files."
msgstr ""

#: ../../getting-started/setup-building.rst:505
msgid ""
"Note that running ``autoreconf`` is not the same as running ``autoconf``."
" For example, ``autoconf`` by itself will not regenerate "
"``pyconfig.h.in``. ``autoreconf`` runs ``autoconf`` and a number of other"
" tools repeatedly as is appropriate."
msgstr ""

#: ../../getting-started/setup-building.rst:510
msgid ""
"Python's ``configure.ac`` script typically requires a specific version of"
" Autoconf.  At the moment, this reads: ``AC_PREREQ(2.69)``. It also "
"requires to have the ``autoconf-archive`` and ``pkg-config`` utilities "
"installed in the system and the ``pkg.m4`` macro file located in the "
"appropriate ``alocal`` location. You can easily check if this is "
"correctly configured by running::"
msgstr ""

#: ../../getting-started/setup-building.rst:518
msgid ""
"If the system copy of Autoconf does not match this version, you will need"
" to install your own copy of Autoconf."
msgstr ""

#: ../../getting-started/setup-building.rst:524
msgid "Regenerate the ABI dump"
msgstr ""

#: ../../getting-started/setup-building.rst:526
msgid ""
"Maintenance branches (not ``main``) have a special file located in "
"``Doc/data/pythonX.Y.abi`` that allows us to know if a given Pull Request"
" affects the public ABI. This file is used by the GitHub CI in a check "
"called ``Check if the ABI has changed`` that will fail if a given Pull "
"Request has changes to the ABI and the ABI file is not updated."
msgstr ""

#: ../../getting-started/setup-building.rst:532
msgid ""
"This check acts as a fail-safe and **doesn't necessarily mean that the "
"Pull Request cannot be merged**. When this check fails you should add the"
" relevant release manager to the PR so that they are aware of the change "
"and they can validate if the change can be made or not."
msgstr ""

#: ../../getting-started/setup-building.rst:538
msgid ""
"ABI changes are allowed before the first release candidate. After the "
"first release candidate, all further releases must have the same ABI for "
"ensuring compatibility with native extensions and other tools that "
"interact with the Python interpreter. See the documentation about the "
":ref:`release candidate <rc>` phase."
msgstr ""

#: ../../getting-started/setup-building.rst:543
msgid ""
"You can regenerate the ABI file by yourself by invoking the ``regen "
"abidump`` Make target. Note that for doing this you need to regenerate "
"the ABI file in the same environment that the GitHub CI uses to check for"
" it. This is because different platforms may include some platform-"
"specific details that make the check fail even if the Python ABI is the "
"same. The easier way to regenerate the ABI file using the same platform "
"as the CI uses is by using Docker::"
msgstr ""

#: ../../getting-started/setup-building.rst:554
msgid ""
"Note that the ``ubuntu`` version used to execute the script matters and "
"**must** match the version used by the CI to check the ABI. See the "
"``.github/workflows/build.yml`` file for more information."
msgstr ""

#: ../../getting-started/setup-building.rst:559
msgid "Troubleshoot the build"
msgstr ""

#: ../../getting-started/setup-building.rst:561
msgid ""
"This section lists some of the common problems that may arise during the "
"compilation of Python, with proposed solutions."
msgstr ""

#: ../../getting-started/setup-building.rst:565
msgid "Avoid recreating auto-generated files"
msgstr ""

#: ../../getting-started/setup-building.rst:567
msgid ""
"Under some circumstances you may encounter Python errors in scripts like "
"``Parser/asdl_c.py`` or ``Python/makeopcodetargets.py`` while running "
"``make``. Python auto-generates some of its own code, and a full build "
"from scratch needs to run the auto-generation scripts. However, this "
"makes the Python build require an already installed Python interpreter; "
"this can also cause version mismatches when trying to build an old (2.x) "
"Python with a new (3.x) Python installed, or vice versa."
msgstr ""

#: ../../getting-started/setup-building.rst:575
msgid ""
"To overcome this problem, auto-generated files are also checked into the "
"Git repository. So if you don't touch the auto-generation scripts, "
"there's no real need to auto-generate anything."
msgstr ""

#: ../../getting-started/setup-building.rst:580
msgid "Editors and Tools"
msgstr ""

#: ../../getting-started/setup-building.rst:582
msgid ""
"Python is used widely enough that practically all code editors have some "
"form of support for writing Python code. Various coding tools also "
"include Python support."
msgstr ""

#: ../../getting-started/setup-building.rst:586
msgid ""
"For editors and tools which the core developers have felt some special "
"comment is needed for coding *in* Python, see :ref:`resources`."
msgstr ""

#: ../../getting-started/setup-building.rst:591
msgid "Directory structure"
msgstr ""

#: ../../getting-started/setup-building.rst:593
msgid ""
"There are several top-level directories in the CPython source tree. "
"Knowing what each one is meant to hold will help you find where a certain"
" piece of functionality is implemented. Do realize, though, there are "
"always exceptions to every rule."
msgstr ""

#: ../../getting-started/setup-building.rst:600
msgid "``Doc``"
msgstr ""

#: ../../getting-started/setup-building.rst:599
msgid ""
"The official documentation. This is what https://docs.python.org/ uses. "
"See also :ref:`building-doc`."
msgstr ""

#: ../../getting-started/setup-building.rst:604
msgid "``Grammar``"
msgstr ""

#: ../../getting-started/setup-building.rst:603
msgid ""
"Contains the :abbr:`EBNF (Extended Backus-Naur Form)` grammar file for "
"Python."
msgstr ""

#: ../../getting-started/setup-building.rst:607
msgid "``Include``"
msgstr ""

#: ../../getting-started/setup-building.rst:607
msgid "Contains all interpreter-wide header files."
msgstr ""

#: ../../getting-started/setup-building.rst:610
msgid "``Lib``"
msgstr ""

#: ../../getting-started/setup-building.rst:610
msgid "The part of the standard library implemented in pure Python."
msgstr ""

#: ../../getting-started/setup-building.rst:613
msgid "``Mac``"
msgstr ""

#: ../../getting-started/setup-building.rst:613
msgid "Mac-specific code (e.g., using IDLE as a macOS application)."
msgstr ""

#: ../../getting-started/setup-building.rst:617
msgid "``Misc``"
msgstr ""

#: ../../getting-started/setup-building.rst:616
msgid ""
"Things that do not belong elsewhere. Typically this is varying kinds of "
"developer-specific documentation."
msgstr ""

#: ../../getting-started/setup-building.rst:621
msgid "``Modules``"
msgstr ""

#: ../../getting-started/setup-building.rst:620
msgid ""
"The part of the standard library (plus some other code) that is "
"implemented in C."
msgstr ""

#: ../../getting-started/setup-building.rst:624
msgid "``Objects``"
msgstr ""

#: ../../getting-started/setup-building.rst:624
msgid "Code for all built-in types."
msgstr ""

#: ../../getting-started/setup-building.rst:627
msgid "``PC``"
msgstr ""

#: ../../getting-started/setup-building.rst:627
msgid "Windows-specific code."
msgstr ""

#: ../../getting-started/setup-building.rst:631
msgid "``PCbuild``"
msgstr ""

#: ../../getting-started/setup-building.rst:630
msgid ""
"Build files for the version of MSVC currently used for the Windows "
"installers provided on python.org."
msgstr ""

#: ../../getting-started/setup-building.rst:635
msgid "``Parser``"
msgstr ""

#: ../../getting-started/setup-building.rst:634
msgid ""
"Code related to the parser. The definition of the AST nodes is also kept "
"here."
msgstr ""

#: ../../getting-started/setup-building.rst:640
msgid "``Programs``"
msgstr ""

#: ../../getting-started/setup-building.rst:638
msgid ""
"Source code for C executables, including the main function for the "
"CPython interpreter (in versions prior to Python 3.5, these files are in "
"the Modules directory)."
msgstr ""

#: ../../getting-started/setup-building.rst:644
msgid "``Python``"
msgstr ""

#: ../../getting-started/setup-building.rst:643
msgid ""
"The code that makes up the core CPython runtime. This includes the "
"compiler, eval loop and various built-in modules."
msgstr ""

#: ../../getting-started/setup-building.rst:648
msgid "``Tools``"
msgstr ""

#: ../../getting-started/setup-building.rst:647
msgid "Various tools that are (or have been) used to maintain Python."
msgstr ""

