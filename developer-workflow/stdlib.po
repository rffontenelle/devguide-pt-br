# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011-2022, Python Software Foundation
# This file is distributed under the same license as the Python Developer's
# Guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python Developer's Guide \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-08 22:51-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../developer-workflow/stdlib.rst:5
msgid "Adding to the Stdlib"
msgstr ""

#: ../../developer-workflow/stdlib.rst:7
msgid ""
"While the stdlib contains a great amount of useful code, sometimes you want "
"more than is provided. This document is meant to explain how you can get "
"either a new addition to a pre-existing module in the stdlib or add an "
"entirely new module."
msgstr ""

#: ../../developer-workflow/stdlib.rst:12
msgid ""
"Changes to pre-existing code is not covered as that is considered a bugfix "
"and thus is treated as a bug that should be filed on the `issue tracker`_."
msgstr ""

#: ../../developer-workflow/stdlib.rst:17
msgid "Adding to a pre-existing module"
msgstr ""

#: ../../developer-workflow/stdlib.rst:19
msgid ""
"If you have found that a function, method, or class is useful and you "
"believe it would be useful to the general Python community, there are some "
"steps to go through in order to see it added to the stdlib."
msgstr ""

#: ../../developer-workflow/stdlib.rst:23
msgid ""
"First, you should gauge the usefulness of the code, which is typically done "
"by sharing the code publicly. This is not a required step, but it is "
"suggested. You have a several options for this:"
msgstr ""

#: ../../developer-workflow/stdlib.rst:28
msgid ""
"Search the `issue tracker`_ for discussion related to the proposed addition. "
"This may turn up an issue that explains why the suggestion wasn't accepted."
msgstr ""

#: ../../developer-workflow/stdlib.rst:30
msgid ""
"Open a new thread in the `Ideas Discourse category`_ to gather feedback "
"directly from the Python core developers and community."
msgstr ""

#: ../../developer-workflow/stdlib.rst:32
msgid ""
"Write a blog post about the code, which may also help gather useful feedback."
msgstr ""

#: ../../developer-workflow/stdlib.rst:33
msgid ""
"Post it to the `Python Cookbook`_. Based on feedback and reviews of the "
"recipe, you can see if others find the functionality as useful as you do."
msgstr ""

#: ../../developer-workflow/stdlib.rst:37
msgid ""
"If you have found general acceptance and usefulness for your code from "
"people, you can open an issue on the `issue tracker`_ with the code attached "
"as a :ref:`pull request <patch>`. If possible, also submit a :ref:"
"`contributor agreement <contributor_agreement>`."
msgstr ""

#: ../../developer-workflow/stdlib.rst:42
msgid ""
"If a core developer decides that your code would be useful to the general "
"Python community, they will then commit your code. If your code is not "
"picked up by a core developer and committed then please do not take this "
"personally. Through your public sharing of your code in order to gauge "
"community support for it you at least can know that others will come across "
"it who may find it useful."
msgstr ""

#: ../../developer-workflow/stdlib.rst:54
msgid "Adding a new module"
msgstr ""

#: ../../developer-workflow/stdlib.rst:55
msgid ""
"It must be stated upfront that getting a new module into the stdlib is very "
"difficult. Adding any significant amount of code to the stdlib increases the "
"burden placed upon core developers. It also means that the module somewhat "
"becomes \"sanctioned\" by the core developers as a good way to do something, "
"typically leading to the rest of the Python community to using the new "
"module over other available solutions. All of this means that additions to "
"the stdlib are not taken lightly."
msgstr ""

#: ../../developer-workflow/stdlib.rst:65
msgid "Acceptable Types of Modules"
msgstr ""

#: ../../developer-workflow/stdlib.rst:66
msgid ""
"Typically two types of modules get added to the stdlib. One type is a module "
"which implements something that is difficult to get right. A good example of "
"this is the :py:mod:`multiprocessing` package. Working out the various OS "
"issues, working through concurrency issues, etc. are all very difficult to "
"get right."
msgstr ""

#: ../../developer-workflow/stdlib.rst:72
msgid ""
"The second type of module is one that implements something that people re-"
"implement constantly. The :py:mod:`itertools` module is a good example of "
"this type as its constituent parts are not necessarily complex, but are used "
"regularly in a wide range of programs and can be a little tricky to get "
"right. Modules that parse widely used data formats also fall under this type "
"of module that the stdlib consists of."
msgstr ""

#: ../../developer-workflow/stdlib.rst:79
msgid ""
"While a new stdlib module does not need to appeal to all users of Python, it "
"should be something that a large portion of the community will find useful. "
"This makes sure that the developer burden placed upon core developers is "
"worth it."
msgstr ""

#: ../../developer-workflow/stdlib.rst:86
msgid "Requirements"
msgstr ""

#: ../../developer-workflow/stdlib.rst:87
msgid ""
"In order for a module to even be considered for inclusion into the stdlib, a "
"couple of requirements must be met."
msgstr ""

#: ../../developer-workflow/stdlib.rst:90
msgid ""
"The most basic is that the code must meet :ref:`standard patch requirements "
"<patch>`. For code that has been developed outside the stdlib typically this "
"means making sure the coding style guides are followed and that the proper "
"tests have been written."
msgstr ""

#: ../../developer-workflow/stdlib.rst:95
msgid ""
"The module needs to have been out in the community for at least a year. "
"Because of Python's conservative nature when it comes to backwards-"
"compatibility, when a module is added to the stdlib its API becomes frozen. "
"This means that a module should only enter the stdlib when it is mature and "
"gone through its \"growing pains\"."
msgstr ""

#: ../../developer-workflow/stdlib.rst:101
msgid ""
"The module needs to be considered best-of-breed. When something is included "
"in the stdlib it tends to be chosen first for products over other third-"
"party solutions. By virtue of having been available to the public for at "
"least a year, a module needs to have established itself as (one of) the top "
"choices by the community for solving the problem the module is intended for."
msgstr ""

#: ../../developer-workflow/stdlib.rst:107
msgid ""
"The development of the module must move into Python's infrastructure (i.e., "
"the module is no longer directly maintained outside of Python). This "
"prevents a divergence between the code that is included in the stdlib and "
"that which is released outside the stdlib (typically done to provide the "
"module to older versions of Python). It also removes the burden of forcing "
"core developers to have to redirect bug reports or patches to an external "
"issue tracker and :abbr:`VCS (version control system)`."
msgstr ""

#: ../../developer-workflow/stdlib.rst:115
msgid ""
"Someone involved with the development of the module must promise to help "
"maintain the module in the stdlib for two years. This not only helps out "
"other core developers by alleviating workload from bug reports that arrive "
"from the first Python release containing the module, but also helps to make "
"sure that the overall design of the module continues to be uniform."
msgstr ""

#: ../../developer-workflow/stdlib.rst:124
msgid "Proposal Process"
msgstr ""

#: ../../developer-workflow/stdlib.rst:126
msgid ""
"If the module you want to propose adding to the stdlib meets the "
"requirements, you may propose its inclusion by following the :abbr:`PEP "
"(Python Enhancement Proposal)` process. See :pep:`1` for details, and the :"
"pep:`PEP index <0>` for previously-accepted PEPs that have proposed a module "
"for inclusion."
msgstr ""

#: ../../developer-workflow/stdlib.rst:133
msgid ""
"If the PEP is accepted, then the module will be added to the stdlib once the "
"authors of the module sign :ref:`contributor agreements "
"<contributor_agreement>`."
msgstr ""
